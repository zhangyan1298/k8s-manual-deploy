# Calico Version v3.4.0
# https://docs.projectcalico.org/v3.4/releases#v3.4.0
# This manifest includes the following component versions:
#   calico/node:v3.4.0
#   calico/cni:v3.4.0
#   calico/kube-controllers:v3.4.0

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://10.0.0.4:2379,https://10.0.0.6:2379,https://10.0.1.3:2379"

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/etc/kubernetes/ssl/etcd-ca"   
  etcd_cert: "/etc/kubernetes/ssl/etcd-cert" # "/calico-secrets/etcd-cert"
  etcd_key: "/etc/kubernetes/ssl/etcd-key"  # "/calico-secrets/etcd-key"
  # Configure the Calico backend to use.
  calico_backend: "bird"

  # Configure the MTU to use
  veth_mtu: "1440"

  # The CNI network configuration to install on each node.  The special
  # values in this config will be automatically populated.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "/etc/kubernetes/ssl/server-key.pem",
          "etcd_cert_file": "/etc/kubernetes/ssl/server.pem",
          "etcd_ca_cert_file": "/etc/kubernetes/ssl/ca.pem",
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets-host
  namespace: kube-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdG5kb090WUN5bElOVDc5dXQ1b29XNlB4VVlnVXZYenF6bDFiQy9GaitnSXJFTzQxCnRybkZ3S25SMDZsWjZJaVJlQ2l0OHZDa2hsbFJXbk5FdG81alp4Q2xJUU5rZ2U5bEduMW4zdk8zVGs2OTFYdmIKa2NCZVh2VkZwM3NodHd3ekVBWHBSR3dpTlRWYlQ0RHJZalFLcFYvYUNpdjNIZG00SCs1czlrMDdPV3lBYngxMgorRkxzbnJ2dm54N3IxUTQ3L1Ivc3ZLbDg2dFR3b1hMckRNSGV3a3ZUWFVvK0tNcGszTCtEekl5UC84ekZQVG9pCkdLNytlNUhqc3NMalBGaGl2QW1BdjFkQ0diYUo0VW1XUVk2QlhJQUtUeEErbTFqZ3Rha2JiWDJCSjhIejhXQ28KWWlEdkVRbFBFNE4vNjNJdXNBbDF5emdVNWhieHRzaHhSVVBmdndJREFRQUJBb0lCQUZlWjdFaVRCclByd01oUQp0KzhkNjlKVFcwQXhmUU9jUFg3bUF4Z3d4RGI3WTRHMVc4Um1YREtyVlRteFRLRC9NQmZvTDlzNi9VSWpENVBGClUyL3gzSGRXM25DREdIWHBZVGplakVmVjZtT0dHazJzTVRaQWpRNDU0ejhOTnBxVEdORFFoYlY3MU5DRzFWZk8KSlRQNG1FUGRTT2twUW5McVhDTzRiRWV6dklOTWJKa0huY0RTNHArbUlVSFZwUXFBTDVGVUxZQ0pKWENROG5oTwpsYmxZb2NVYXQvRzNjbmRvV1hZQVNsWUd2YW5mWXZvd1FBTHlseTRhRzNXSkNhTGZ1VTNQR2VXWGFYdnAzc2UwClBvZklxYTJkWDV1TXB4dW1aRTJxZGpqQ3BWRzJRV0ZmSnhYL24rSHVoNDFmTlZQYnY3VmxtdW5GbWRFcUcyR3gKQUhyczBFRUNnWUVBMzE5VFIyT1Z0d1dJWEkyR25lanBXSUVwUXFSQkpKbWxPam9tc1NMT2RmUXRDOW1na2lGSQpjQkk0bEd6L3ExcTJwdTFLZnFDVmJodWxJU1FqMmNDdWhGekU4dXN4U2ovaFQ3bmJrdkxRZ2NQcVR0RFIrT1c0CmlZeUsxSkQrcm1Cc2tWS1MwUlNMeEkyUmsrVDVqVW81cDROZE8wZXZ6MGJZaWxjYTl4WmxnTU1DZ1lFQTBSNTMKUlZGTTVvN3BPK25FeFNxblAyRWRxYnRHUVJEajdEa1RPU0lqR0Y4OEtMa2JXY081eSsySUNmR2FxWW0xR0M1Uwp3TXlBTWFtcFlQMWVSMnJMU29IVDBmQ2xyc3JtWTVxTXYvaXpEU1laVFdzQnlDWGN2cDhCdkZLeE9BWU5MTXN3CitFTU1iYjAzTnZPa2F1UkJTVU9yNW8xci9sdTJscW5ZU2Z2OWRWVUNnWUFYSzM0cDg0eCtGWmJWY3VDNTFJVVAKNXlYdWdiYzRJcS9lNEZWUEhuc29CUkgvSHEzbk9vaVhCMnpUQ0pOa3BONDVabmZKdHNLSlQxakxuVUlTdmtmYgo5dnQrN3lLSHZ5U1I3b2QyTUxXc0lEUlh4SlZqS2dFQVU1RzdCdWRFRTBCdnVvNzhIUk42YWV6bDJHU0NZV2FsCmw1eStIMnQvSnF3amZYR1FtOFFmblFLQmdCYmZQaXhXdUJKL2p3TCtqb2NDSTBqTFZuTTZDSFVWWTloeVphZmEKRS95V2JmNEdRUGVRY01IZE9RUGRhUTBpQXF5aVpHcXg4MU43T3d0Z3F1OGt2eGRuRzhQYWprU1A3S0w0Ukd5Ngp4dHFwVUJzbm1RcExHZG0vaW5FT21sT0dWZXFRVHNyWWlvTjJMcFBVRWllZXo0VXo0WmxWM25uempnVHNqcnVJCjFEQUJBb0dCQU1ERjBwQmlhK041QnlDYXY5WG9oaWs4aldXZ0NVSU5ZSXpyZ0VpU1JMZ3pwT1JFdjN1bnFXWTMKeWx2L0hKRDNudkJpR0xrejAwY1dJVlNWdXhJRzMySzdFTGRwSTlhcUFRb09HUUozeW9MVk9IU1drVXY0WEV5QwpqM0hYeUNLWWhadG9NR3h2ZW9LOXRXYmpNWlFkVmYwOU5tUGd5anNNeXpRR05tSnZFS05PCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU0ekNDQTh1Z0F3SUJBZ0lVWHBrOExmNzl5amp0dGFkN0dWSnJyVGxJU3prd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RGpBTUJnTlZCQWdUQlVobFJtVnBNUTR3REFZRFZRUUhFd1ZJWlVabAphVEVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEV6QVJCZ05WQkFNVENtdDFZbVZ5CmJtVjBaWE13SGhjTk1UZ3hNakkxTURjeE1UQXdXaGNOTWpNeE1qSTBNRGN4TVRBd1dqQmRNUXN3Q1FZRFZRUUcKRXdKRFRqRU9NQXdHQTFVRUNCTUZTR1ZHWldreERqQU1CZ05WQkFjVEJVaGxSbVZwTVF3d0NnWURWUVFLRXdOcgpPSE14RHpBTkJnTlZCQXNUQmxONWMzUmxiVEVQTUEwR0ExVUVBeE1HVTJWeWRtVnlNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0bmRvT3RZQ3lsSU5UNzl1dDVvb1c2UHhVWWdVdlh6cXpsMWIKQy9GaitnSXJFTzQxdHJuRndLblIwNmxaNklpUmVDaXQ4dkNraGxsUlduTkV0bzVqWnhDbElRTmtnZTlsR24xbgozdk8zVGs2OTFYdmJrY0JlWHZWRnAzc2h0d3d6RUFYcFJHd2lOVFZiVDREcllqUUtwVi9hQ2l2M0hkbTRIKzVzCjlrMDdPV3lBYngxMitGTHNucnZ2bng3cjFRNDcvUi9zdktsODZ0VHdvWExyRE1IZXdrdlRYVW8rS01wazNMK0QKekl5UC84ekZQVG9pR0s3K2U1SGpzc0xqUEZoaXZBbUF2MWRDR2JhSjRVbVdRWTZCWElBS1R4QSttMWpndGFrYgpiWDJCSjhIejhXQ29ZaUR2RVFsUEU0Ti82M0l1c0FsMXl6Z1U1aGJ4dHNoeFJVUGZ2d0lEQVFBQm80SUJsVENDCkFaRXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUJNQXdHQTFVZEV3RUIKL3dRQ01BQXdIUVlEVlIwT0JCWUVGTUdKbFFFRjN6aUdSdGhzU0pUbnhTeWQvckpJTUI4R0ExVWRJd1FZTUJhQQpGQXdsbnRDR0tIWVFmaE16KzJlUVd5VENXMno1TUlJQkdnWURWUjBSQklJQkVUQ0NBUTJDRFhSMGFXTmhjbDlyCk9ITmZiakdDRFhSMGFXTmhjbDlyT0hOZmJqS0NEWFIwYVdOaGNsOXJPSE5mYlRHQ0NXeHZZMkZzYUc5emRJSU4KWTJ4MWMzUmxjaTVzYjJOaGJJSUthM1ZpWlhKdVpYUmxjNElTYTNWaVpYSnVaWFJsY3k1a1pXWmhkV3gwZ2hacgpkV0psY201bGRHVnpMbVJsWm1GMWJIUXVjM1pqZ2g1cmRXSmxjbTVsZEdWekxtUmxabUYxYkhRdWMzWmpMbU5zCmRYTjBaWEtDSkd0MVltVnlibVYwWlhNdVpHVm1ZWFZzZEM1emRtTXVZMngxYzNSbGNpNXNiMk5oYkljRUNnQUEKQkljRUNnQUFCWWNFQ2dBQkFvY0VDZ0FBQm9jRUNnQUFBSWNFQ2dBQkE0Y0VDZ0FCQkljRUNnQUFCNGNFZndBQQpBWWNFckJVQUFZY0VyQlFBQVljRXJCQUFBVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBWlpsWEN4RzVjZmFHCjJLNk53Z1VmUHpITVllZkM0KzNYL3dQS3ZiNkNsNko3WWM3dE5QcFdPaWxTK093WThIMytOclhKOEkwMmFENnUKR1FweVpyckpBNWRyQVFEMnNPR1hqY1lCTExXRExyK2MraFBkRnV5WElHZmplTWY1Z3AzckpKZHRpRE1JNGFxdQp5L2IvcE5IcS8wdU9FYndTNFJsZStwUG1CZUtwTk9HMGVST3IrUHJtV0NnaDN6dWVUNXZUb0UwRGo1ZzdGRVhNCjFiZG5odzdmRlRxOUxLeTExRlQ5OWxFY0VsbzVpZmFTSERjTFNzQVh6YjhXcnBYVjNOWEMzbWkyTlRxZ3JiWnoKVU9qcWhDV1JWNEQ2VSs2L0dGSVhLdzZaV2xvWFN3YjE2QlR4UDlyQ0M4OTFJd1ArT2s2cXlrS2ZRWk5lTlNqcwo3bE96QlNjNnF3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR0akNDQXA2Z0F3SUJBZ0lVQlEzTm1NYWhxamlNSVpkWWxzR0hqMzRuY1JBd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RGpBTUJnTlZCQWdUQlVobFJtVnBNUTR3REFZRFZRUUhFd1ZJWlVabAphVEVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEV6QVJCZ05WQkFNVENtdDFZbVZ5CmJtVjBaWE13SGhjTk1UZ3hNakkxTURNMU1EQXdXaGNOTWpNeE1qSTBNRE0xTURBd1dqQmhNUXN3Q1FZRFZRUUcKRXdKRFRqRU9NQXdHQTFVRUNCTUZTR1ZHWldreERqQU1CZ05WQkFjVEJVaGxSbVZwTVF3d0NnWURWUVFLRXdOcgpPSE14RHpBTkJnTlZCQXNUQmxONWMzUmxiVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUpaWmZ5MkZ1RlZrSkVnY3l1azlveHZkeHRXVnhGbzYKalhROXVNaGJRa2pmN1F6eDVGaVhQM2o2bDNYU0RHZmk2bW9hSnZodkNXMi9ZaWRteG9KMHk3Q0N0SytqRGxKNQp4dDFiTHZsTG5lNWRNMGJMWDNXejAzLy8vSWlYTGROVEFvZEhxdFd2Qk9EWEZqTmZ3L2NWc1duY24xT0FTTmNICmlWNytGenNHZGFVK2lnU1VmWEVEYnpDM3FxS2VNb2RGSS9ZT1JNMXNpOW5TVTl2TTNQdlJkZGplSk9jMDl5dE4KWDJWekhtMUg3YnRIbmtwdUY5TzNvemloY2I0R0YwWWwwYXVmOE9rUE1Od2lkSW8wRUZmbzU0Qm50R3BNTlhhcAovWUxQalc5RjJKMDdpYkZ4ZE5RSnQ2L3dOaUEvV2ZZOW42blFKeFVpQmFYcnIrcXh4bGJydUc4Q0F3RUFBYU5tCk1HUXdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CSUdBMVVkRXdFQi93UUlNQVlCQWY4Q0FRSXdIUVlEVlIwT0JCWUUKRkF3bG50Q0dLSFlRZmhNeisyZVFXeVRDVzJ6NU1COEdBMVVkSXdRWU1CYUFGQXdsbnRDR0tIWVFmaE16KzJlUQpXeVRDVzJ6NU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQmRFQVlZZmNIY2liRzlaMERTVFoxaC96cEtvS2F0CjhvRE9ZZXR1bUZuRDUvcldoekE4eFZKL0FXUnArdXlTT1FhNUcvS1hFMndHbThIcUUxaE40dGdsYytjRjZmeC8Kcm9WUkc1SXpycTZKeXExbTN5a3orMzI4alR6djgrSE5UMlpsWHNvNjFoZ2REYTdIckhRWmI1TmdER1dkbXRkawoxM0d0dkMxcEk1VXdRZldzcTBjdUFqY0ZYdVNJcGlTMXpnaWlYYTFGekZGZjFnUkU4QnUxQ3VwRnIrRWtWY2FVCnRIdXRjc0NFemRLSER2M3VhckNRYnVzYlBmbkJrMjd0SktDQW9Ydkk5bXF1b21NcXFsTjNDdkV2M1NqSUZYbVMKTTJvMzd0RzNqVFQ5am56NFZZU2EvUXo0aFVyaDZzOGlTK0VCTFduWkpuT2dYdmprM0hrOXY2K0sKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=

---
# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        # This, along with the CriticalAddonsOnly toleration below,
        # marks the pod as a critical add-on, ensuring it gets
        # priority scheduling and that its resources are reserved
        # if it ever gets evicted.
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      initContainers:
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v3.4.0
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /etc/kubernetes/ssl
              name: etcd-certs-host
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.4.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "Never"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "172.20.0.0/16"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "false"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
            - name: FELIX_FAILSAFEINBOUNDHOSTPORTS
              value: "tcp:22,tcp:80,tcp:179,tcp:68,tcp:2379,tcp:2380,tcp:6666,tcp:6667,tcp:53,udp:53"
            - name: FELIX_FAILSAFEOUTBOUNDHOSTPORTS
              value: "tcp:22,tcp:80,tcp:179,tcp:68,tcp:2379,tcp:2380,tcp:6666,tcp:6667"
            - name: LOGFILEPATH
              value: /var/log/calico/felix.log
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
              - /bin/calico-node
              - -bird-ready
              - -felix-ready
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - mountPath: /etc/kubernetes/ssl
              name: etcd-certs-host
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs-host
          secret:
            secretName: calico-etcd-secrets-host
            defaultMode: 0400
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system

---
# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v3.4.0
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,namespace,serviceaccount,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /etc/kubernetes/ssl
              name: etcd-certs-host
          readinessProbe:
            exec:
              command:
              - /usr/bin/check-status
              - -r
      volumes:
        # Mount in the etcd TLS secrets with mode 400.
        # See https://kubernetes.io/docs/concepts/configuration/secret/
        - name: etcd-certs-host
          secret:
            secretName: calico-etcd-secrets-host
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system
---

# Include a clusterrole for the kube-controllers component,
# and bind it to the calico-kube-controllers serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
rules:
  # Pods are monitored for changing labels.
  # The node controller monitors Kubernetes nodes.
  # Namespace and serviceaccount labels are used for policy.
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - namespaces
      - serviceaccounts
    verbs:
      - watch
      - list
  # Watch for changes to Kubernetes NetworkPolicies.
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system
---
# Include a clusterrole for the calico-node DaemonSet,
# and bind it to the calico-node serviceaccount.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: calico-node
rules:
  # The CNI plugin needs to get pods, nodes, and namespaces.
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
  - apiGroups: [""]
    resources:
      - endpoints
      - services
    verbs:
      # Used to discover service IPs for advertisement.
      - watch
      - list
  - apiGroups: [""]
    resources:
      - nodes/status
    verbs:
      # Needed for clearing NodeNetworkUnavailable flag.
      - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system
---


